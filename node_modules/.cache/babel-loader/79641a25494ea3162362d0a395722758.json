{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\Krisc\\\\Downloads\\\\React-BeachREsortdeni-main\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\Krisc\\\\Downloads\\\\React-BeachREsortdeni-main\\\\src\\\\Context.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport items from './data';\nconst RoomContext = React.createContext();\n\nclass RoomProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      rooms: [],\n      sortedRooms: [],\n      featuredRooms: [],\n      loading: true,\n      type: \"all\",\n      capacity: 1,\n      price: 0,\n      minPrice: 0,\n      maxPrice: 0,\n      minSize: 0,\n      maxSize: 0,\n      breakfast: false,\n      pets: false\n    };\n\n    this.getRoom = slug => {\n      let tempRooms = [...this.state.rooms];\n      const room = tempRooms.find(room => room.slug === slug);\n      return room;\n    };\n\n    this.handleChange = event => {\n      const target = event.target;\n      const value = target.type === \"checkbox\" ? target.checked : target.value;\n      const name = event.target.name;\n      this.setState({\n        [name]: value\n      }, this.filterRooms);\n    };\n\n    this.filterRooms = () => {\n      let _this$state = this.state,\n          rooms = _this$state.rooms,\n          type = _this$state.type,\n          capacity = _this$state.capacity,\n          price = _this$state.price,\n          minSize = _this$state.minSize,\n          maxSize = _this$state.maxSize,\n          breakfast = _this$state.breakfast,\n          pets = _this$state.pets; //all the rooms\n\n      let tempRooms = [...rooms]; // transform values\n\n      capacity = parseInt(capacity);\n      price = parseInt(price); //filter type\n\n      if (type !== \"all\") {\n        tempRooms = tempRooms.filter(item => item.type === type);\n        this.setState({\n          sortedRooms: tempRooms\n        });\n      } //filter capacity\n\n\n      if (capacity !== 1) {\n        tempRooms = tempRooms.filter(item => item.capacity >= capacity);\n        this.setState({\n          sortedRooms: tempRooms\n        });\n      } //filter price\n\n\n      tempRooms = tempRooms.filter(item => item.price <= price); //filter Size\n\n      tempRooms = tempRooms.filter(item => item.size <= maxSize && item.size >= minSize);\n      console.log(\"sizeeee\", tempRooms.size); // filter extras\n\n      if (breakfast) {\n        tempRooms = tempRooms.filter(item => item.breakfast);\n      }\n\n      if (pets) {\n        tempRooms = tempRooms.filter(item => item.pets);\n      }\n\n      this.setState({\n        sortedRooms: tempRooms\n      });\n    };\n  }\n\n  // Get Data\n  componentDidMount() {\n    let rooms = this.formatData(items);\n    let featuredRooms = rooms.filter(item => item.featured);\n    let maxSize = Math.max(...rooms.map(item => item.size));\n    let maxPrice = Math.max(...rooms.map(item => item.price));\n    this.setState({\n      rooms,\n      featuredRooms,\n      sortedRooms: rooms,\n      loading: false,\n      price: maxPrice,\n      maxPrice,\n      maxSize\n    });\n  }\n\n  formatData(items) {\n    let tempItems = items.map(item => {\n      let id = item.sys.id;\n      let images = item.fields.images.map(image => image.fields.file.url);\n\n      let rooms = _objectSpread({}, item.fields, {\n        images,\n        id\n      });\n\n      return rooms;\n    });\n    return tempItems;\n  }\n\n  render() {\n    return React.createElement(RoomContext.Provider, {\n      value: _objectSpread({}, this.state, {\n        getRoom: this.getRoom,\n        handleChange: this.handleChange\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, this.props.children);\n  }\n\n}\n\nconst RoomConsumer = RoomContext.Consumer;\nexport function withRoomConsumer(Component) {\n  return function ConsumerWrapper(props) {\n    return React.createElement(RoomConsumer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, value => React.createElement(Component, Object.assign({}, props, {\n      context: value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    })));\n  };\n}\nexport { RoomProvider, RoomConsumer, RoomContext };","map":{"version":3,"sources":["C:\\Users\\Krisc\\Downloads\\React-BeachREsortdeni-main\\src\\Context.js"],"names":["React","Component","items","RoomContext","createContext","RoomProvider","state","rooms","sortedRooms","featuredRooms","loading","type","capacity","price","minPrice","maxPrice","minSize","maxSize","breakfast","pets","getRoom","slug","tempRooms","room","find","handleChange","event","target","value","checked","name","setState","filterRooms","parseInt","filter","item","size","console","log","componentDidMount","formatData","featured","Math","max","map","tempItems","id","sys","images","fields","image","file","url","render","props","children","RoomConsumer","Consumer","withRoomConsumer","ConsumerWrapper"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport items from './data';\n\nconst RoomContext = React.createContext();\n\nclass RoomProvider extends Component {\n    state = {\n        rooms: [],\n        sortedRooms: [],\n        featuredRooms: [],\n        loading: true,\n        type: \"all\",\n        capacity: 1,\n        price: 0,\n        minPrice: 0,\n        maxPrice: 0,\n        minSize: 0,\n        maxSize: 0,\n        breakfast: false,\n        pets: false\n    };\n    // Get Data\n\n    componentDidMount() {\n        let rooms = this.formatData(items)\n        let featuredRooms = rooms.filter(item =>\n            item.featured)\n        let maxSize = Math.max(...rooms.map(item => item.size))\n        let maxPrice = Math.max(...rooms.map(item => item.price))\n\n        this.setState({\n            rooms,\n            featuredRooms,\n            sortedRooms: rooms,\n            loading: false,\n            price: maxPrice,\n            maxPrice,\n            maxSize,\n        })\n\n    }\n\n    formatData(items) {\n        let tempItems = items.map(item => {\n            let id = item.sys.id\n            let images = item.fields.images.map(image => image.fields.file.url)\n            let rooms = { ...item.fields, images, id }\n            return rooms\n        })\n        return tempItems\n    }\n\n    getRoom = (slug) => {\n        let tempRooms = [...this.state.rooms];\n        const room = tempRooms.find(room => room.slug === slug)\n        return room;\n    }\n\n    handleChange = (event) => {\n        const target = event.target;\n        const value = target.type === \"checkbox\" ? target.checked : target.value\n        const name = event.target.name;\n\n        this.setState(\n            {\n                [name]: value,\n            },\n            this.filterRooms\n        )\n\n    }\n\n    filterRooms = () => {\n        let { rooms,\n            type,\n            capacity,\n            price,\n            minSize,\n            maxSize,\n            breakfast,\n            pets } = this.state\n        //all the rooms\n        let tempRooms = [...rooms];\n        // transform values\n        capacity = parseInt(capacity);\n        price = parseInt(price);\n\n        //filter type\n        if (type !== \"all\") {\n            tempRooms = tempRooms.filter(item => item.type === type)\n            this.setState({\n                sortedRooms: tempRooms\n            })\n        }\n        //filter capacity\n        if (capacity !== 1) {\n            tempRooms = tempRooms.filter(item => item.capacity >= capacity)\n            this.setState({\n                sortedRooms: tempRooms\n            })\n        }\n\n        //filter price\n        tempRooms = tempRooms.filter(item => item.price <= price)\n\n        //filter Size\n        tempRooms = tempRooms.filter(item => item.size <= maxSize && item.size >= minSize)\n        console.log(\"sizeeee\", tempRooms.size)\n\n        // filter extras\n        if (breakfast) {\n            tempRooms = tempRooms.filter(item => item.breakfast)\n        }\n        if (pets) {\n            tempRooms = tempRooms.filter(item => item.pets)\n        }\n        this.setState({\n            sortedRooms: tempRooms\n        })\n\n    }\n\n    render() {\n        return (\n            <RoomContext.Provider value={{ ...this.state, getRoom: this.getRoom, handleChange: this.handleChange }}>\n                {this.props.children}\n            </RoomContext.Provider>\n        );\n    }\n}\n\nconst RoomConsumer = RoomContext.Consumer;\n\nexport function withRoomConsumer(Component) {\n    return function ConsumerWrapper(props) {\n        return <RoomConsumer>\n            {value => <Component {...props} context={value} />}\n        </RoomConsumer>\n    }\n}\n\nexport { RoomProvider, RoomConsumer, RoomContext };"]},"metadata":{},"sourceType":"module"}